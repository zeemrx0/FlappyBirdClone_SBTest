//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace LNE.Inputs
{
    public partial class @PlayerInputAction: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputAction()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""BirdMovement"",
            ""id"": ""0a0daeb4-896c-42c2-914a-ee13d564b94e"",
            ""actions"": [
                {
                    ""name"": ""Flap"",
                    ""type"": ""Button"",
                    ""id"": ""41c8e5fe-6e5e-4a50-8dd1-7ef5a39f9df7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ee381b0b-8557-4e90-a31e-72c7b8110bb3"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // BirdMovement
            m_BirdMovement = asset.FindActionMap("BirdMovement", throwIfNotFound: true);
            m_BirdMovement_Flap = m_BirdMovement.FindAction("Flap", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // BirdMovement
        private readonly InputActionMap m_BirdMovement;
        private List<IBirdMovementActions> m_BirdMovementActionsCallbackInterfaces = new List<IBirdMovementActions>();
        private readonly InputAction m_BirdMovement_Flap;
        public struct BirdMovementActions
        {
            private @PlayerInputAction m_Wrapper;
            public BirdMovementActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
            public InputAction @Flap => m_Wrapper.m_BirdMovement_Flap;
            public InputActionMap Get() { return m_Wrapper.m_BirdMovement; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(BirdMovementActions set) { return set.Get(); }
            public void AddCallbacks(IBirdMovementActions instance)
            {
                if (instance == null || m_Wrapper.m_BirdMovementActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_BirdMovementActionsCallbackInterfaces.Add(instance);
                @Flap.started += instance.OnFlap;
                @Flap.performed += instance.OnFlap;
                @Flap.canceled += instance.OnFlap;
            }

            private void UnregisterCallbacks(IBirdMovementActions instance)
            {
                @Flap.started -= instance.OnFlap;
                @Flap.performed -= instance.OnFlap;
                @Flap.canceled -= instance.OnFlap;
            }

            public void RemoveCallbacks(IBirdMovementActions instance)
            {
                if (m_Wrapper.m_BirdMovementActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IBirdMovementActions instance)
            {
                foreach (var item in m_Wrapper.m_BirdMovementActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_BirdMovementActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public BirdMovementActions @BirdMovement => new BirdMovementActions(this);
        public interface IBirdMovementActions
        {
            void OnFlap(InputAction.CallbackContext context);
        }
    }
}
